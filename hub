-- SafeChatGUI.lua
-- Clean, safe rewrite that preserves core UX while removing unsafe/bypass logic.
-- Features kept:
--  • Splash overlay with blur + sound
--  • Two theme buttons (choose between two background images)
--  • Draggable panel with TextBox + Send button
--  • Keep Text checkbox (doesn't clear textbox when on)
--  • Minimize / restore button
--  • Gentle pop animation on theme buttons
--  • Local stylized converter (aesthetic only)
-- Uses only supported Roblox APIs; no HTTP, no CoreGui writes.

-- HOW TO USE:
-- Place this LocalScript under StarterPlayerScripts (or StarterGui) in Studio.
-- Customize ASSET IDS below if desired.

--// Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local localPlayer = Players.LocalPlayer
local playerGui = localPlayer:WaitForChild("PlayerGui")

--// Assets (replace with your own if you want)
local SPLASH_OVERLAY_IMAGE = "rbxassetid://85939232985945" -- your overlay
local SPLASH_SOUND_ID = "rbxassetid://9072301639"
local INTRO_SOUND_ID = "rbxassetid://5797595098"

local THEME_IMAGE_1 = "rbxassetid://94245384829041"
local THEME_IMAGE_2 = "rbxassetid://100554698694610"

--// Helpers
local function tween(obj, info, goal)
	return TweenService:Create(obj, info, goal)
end

local function safePlaySound(parent, soundId, volume)
	local s = Instance.new("Sound")
	s.SoundId = soundId
	s.Volume = volume or 1
	s.Parent = parent
	s:Play()
	return s
end

--// Splash (safe: attaches to PlayerGui)
local splashGui = Instance.new("ScreenGui")
splashGui.IgnoreGuiInset = true
splashGui.ResetOnSpawn = false
splashGui.Name = "SplashGui"
splashGui.Parent = playerGui

local blur = Instance.new("BlurEffect")
blur.Size = 0
blur.Parent = Lighting

local overlay = Instance.new("ImageLabel")
overlay.Size = UDim2.fromScale(1, 1)
overlay.BackgroundTransparency = 1
overlay.Image = SPLASH_OVERLAY_IMAGE
overlay.ImageTransparency = 1
overlay.ScaleType = Enum.ScaleType.Stretch
overlay.Parent = splashGui

local splashSound = safePlaySound(splashGui, SPLASH_SOUND_ID, 1)

tween(blur, TweenInfo.new(1.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Size = 24}):Play()
tween(overlay, TweenInfo.new(1.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageTransparency = 0.3}):Play()
task.wait(1.6)
tween(blur, TweenInfo.new(1.0), {Size = 0}):Play()
tween(overlay, TweenInfo.new(1.0), {ImageTransparency = 1}):Play()
tween(splashSound, TweenInfo.new(0.8), {Volume = 0}):Play()
task.wait(1.0)
splashGui:Destroy()

-- Intro chime
local introSound = safePlaySound(playerGui, INTRO_SOUND_ID, 1)
task.delay(2.5, function()
	if introSound and introSound.IsDescendantOf(game) then
		tween(introSound, TweenInfo.new(1.0), {Volume = 0}):Play()
		task.wait(1.0)
		introSound:Destroy()
	end
end)

--// Theme chooser
local chooserGui = Instance.new("ScreenGui")
chooserGui.ResetOnSpawn = false
chooserGui.Name = "ScriptChooserGui"
chooserGui.Parent = playerGui

local container = Instance.new("Frame")
container.BackgroundTransparency = 1
container.Size = UDim2.fromScale(1, 1)
container.Parent = chooserGui

local function createAssetButton(imageId)
	local btn = Instance.new("ImageButton")
	btn.Size = UDim2.fromOffset(300, 300)
	btn.Position = UDim2.fromScale(0.5, 0.5)
	btn.AnchorPoint = Vector2.new(0.5, 0.5)
	btn.BackgroundTransparency = 1
	btn.ImageTransparency = 1
	btn.Image = imageId
	btn.ScaleType = Enum.ScaleType.Fit
	btn.Parent = container
	return btn
end

local button1 = createAssetButton(THEME_IMAGE_1)
local button2 = createAssetButton(THEME_IMAGE_2)

tween(blur, TweenInfo.new(0.5), {Size = 20}):Play()
task.wait(0.25)

local fadeIn = TweenInfo.new(0.45, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
tween(button1, fadeIn, {ImageTransparency = 0, Position = UDim2.fromScale(0.25, 0.5)}):Play()
tween(button2, fadeIn, {ImageTransparency = 0, Position = UDim2.fromScale(0.75, 0.5)}):Play()

local function popEffect(btn)
	local grow = tween(btn, TweenInfo.new(0.08), {Size = UDim2.fromOffset(330, 330)})
	local shrink = tween(btn, TweenInfo.new(0.08), {Size = UDim2.fromOffset(300, 300)})
	grow:Play()
	grow.Completed:Connect(function()
		shrink:Play()
	end)
end

local function fadeOutChooser()
	tween(blur, TweenInfo.new(0.5), {Size = 0}):Play()
	tween(button1, TweenInfo.new(0.4), {ImageTransparency = 1}):Play()
	tween(button2, TweenInfo.new(0.4), {ImageTransparency = 1}):Play()
	task.wait(0.45)
	chooserGui:Destroy()
	if blur then blur:Destroy() end
end

--// Style converter (aesthetic only)
local letterMap = {
	["A"]="Ⓐ",["B"]="Ⓑ",["C"]="Ⓒ",["D"]="Ⓓ",["E"]="Ⓔ",["F"]="Ⓕ",
	["G"]="Ⓖ",["H"]="Ⓗ",["I"]="Ⓘ",["J"]="Ⓙ",["K"]="Ⓚ",["L"]="Ⓛ",
	["M"]="Ⓜ",["N"]="Ⓝ",["O"]="Ⓞ",["P"]="Ⓟ",["Q"]="Ⓠ",["R"]="Ⓡ",
	["S"]="Ⓢ",["T"]="Ⓣ",["U"]="Ⓤ",["V"]="Ⓥ",["W"]="Ⓦ",["X"]="Ⓧ",
	["Y"]="Ⓨ",["Z"]="Ⓩ",
	["a"]="ⓐ",["b"]="ⓑ",["c"]="ⓒ",["d"]="ⓓ",["e"]="ⓔ",["f"]="ⓕ",
	["g"]="ⓖ",["h"]="ⓗ",["i"]="ⓘ",["j"]="ⓙ",["k"]="ⓚ",["l"]="ⓛ",
	["m"]="ⓜ",["n"]="ⓝ",["o"]="ⓞ",["p"]="ⓟ",["q"]="ⓠ",["r"]="ⓡ",
	["s"]="ⓢ",["t"]="ⓣ",["u"]="ⓤ",["v"]="ⓥ",["w"]="ⓦ",["x"]="ⓧ",
	["y"]="ⓨ",["z"]="ⓩ",
	["0"]="⓪",["1"]="①",["2"]="②",["3"]="③",["4"]="④",
	["5"]="⑤",["6"]="⑥",["7"]="⑦",["8"]="⑧",["9"]="⑨",
}
local function stylize(msg)
	local out = table.create(#msg)
	for i = 1, #msg do
		local ch = msg:sub(i,i)
		out[i] = letterMap[ch] or ch
	end
	return table.concat(out)
end

--// Main Panel builder (used by both themes)
local function buildPanel(themeImageId)
	local gui = Instance.new("ScreenGui")
	gui.Name = "ChatStylerGui"
	gui.ResetOnSpawn = false
	gui.Parent = playerGui

	local frame = Instance.new("Frame")
	frame.Size = UDim2.fromOffset(316, 128)
	frame.Position = UDim2.new(0.5, -158, 0.5, -64)
	frame.BackgroundColor3 = Color3.fromRGB(0,0,0)
	frame.BorderSizePixel = 0
	frame.Parent = gui

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 4)
	corner.Parent = frame

	-- Drag
	do
		local UserInputService = game:GetService("UserInputService")
		local dragging, dragInput, dragStart, startPos

		local function update(input)
			local delta = input.Position - dragStart
			frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
		end

		frame.InputBegan:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
				dragging = true
				dragStart = input.Position
				startPos = frame.Position

				input.Changed:Connect(function()
					if input.UserInputState == Enum.UserInputState.End then
						dragging = false
					end
				end)
			end
		end)

		frame.InputChanged:Connect(function(input)
			if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
				dragInput = input
			end
		end)

		UserInputService.InputChanged:Connect(function(input)
			if input == dragInput and dragging then
				update(input)
			end
		end)
	end

	-- Background image
	local bg = Instance.new("ImageLabel")
	bg.BackgroundTransparency = 0
	bg.Image = themeImageId
	bg.Size = UDim2.fromOffset(316,128)
	bg.Parent = frame
	local bgCorner = Instance.new("UICorner")
	bgCorner.CornerRadius = UDim.new(0,4)
	bgCorner.Parent = bg

	-- Header
	local title = Instance.new("TextLabel")
	title.Size = UDim2.new(1,0,0,34)
	title.BackgroundTransparency = 0.25
	title.BackgroundColor3 = Color3.fromRGB(0,0,0)
	title.Text = "CHAT STYLER"
	title.Font = Enum.Font.GothamBold
	title.TextScaled = true
	title.TextColor3 = Color3.new(1,1,1)
	title.Parent = bg
	local titleCorner = Instance.new("UICorner")
	titleCorner.CornerRadius = UDim.new(0,4)
	titleCorner.Parent = title

	-- TextBox
	local input = Instance.new("TextBox")
	input.PlaceholderText = "W R I T E  H E R E"
	input.Size = UDim2.new(0.84, -20, 0, 40)
	input.Position = UDim2.new(0, 34, 0, 47)
	input.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
	input.TextColor3 = Color3.new(1,1,1)
	input.TextTransparency = 0
	input.BackgroundTransparency = 0.2
	input.Font = Enum.Font.Gotham
	input.TextScaled = true
	input.ClearTextOnFocus = false
	input.Parent = bg
	local inputCorner = Instance.new("UICorner")
	inputCorner.CornerRadius = UDim.new(0,2)
	inputCorner.Parent = input

	-- Send button
	local sendBtn = Instance.new("TextButton")
	sendBtn.Size = UDim2.fromOffset(120, 34)
	sendBtn.Position = UDim2.new(0.29, 10, 0.72, 0)
	sendBtn.BackgroundColor3 = Color3.fromRGB(0,0,0)
	sendBtn.BackgroundTransparency = 0.2
	sendBtn.TextColor3 = Color3.new(1,1,1)
	sendBtn.TextScaled = true
	sendBtn.Font = Enum.Font.GothamBold
	sendBtn.Text = "SEND"
	sendBtn.Parent = bg
	local sendCorner = Instance.new("UICorner")
	sendCorner.CornerRadius = UDim.new(0,2)
	sendCorner.Parent = sendBtn

	-- Minimize
	local miniBtn = Instance.new("TextButton")
	miniBtn.Size = UDim2.fromOffset(20,20)
	miniBtn.Position = UDim2.new(1,-25,0,5)
	miniBtn.BackgroundColor3 = Color3.fromRGB(0,0,0)
	miniBtn.BackgroundTransparency = 0.15
	miniBtn.Text = "-"
	miniBtn.TextScaled = true
	miniBtn.TextColor3 = Color3.new(1,1,1)
	miniBtn.Font = Enum.Font.GothamBold
	miniBtn.Parent = frame
	local miniCorner = Instance.new("UICorner")
	miniCorner.CornerRadius = UDim.new(0,2)
	miniCorner.Parent = miniBtn

	-- Keep Text checkbox
	local keepBtn = Instance.new("TextButton")
	keepBtn.Name = "KeepTextCheckbox"
	keepBtn.Size = UDim2.fromOffset(20,20)
	keepBtn.Position = UDim2.new(1,-25,1,-25)
	keepBtn.BackgroundColor3 = Color3.fromRGB(30,30,30)
	keepBtn.Text = ""
	keepBtn.Parent = frame
	local keepCorner = Instance.new("UICorner")
	keepCorner.CornerRadius = UDim.new(0,3)
	keepCorner.Parent = keepBtn
	local tick = Instance.new("TextLabel")
	tick.Name = "Tick"
	tick.Size = UDim2.fromScale(1,1)
	tick.BackgroundTransparency = 1
	tick.Text = "✓"
	tick.TextScaled = true
	tick.TextTransparency = 1
	tick.TextColor3 = Color3.fromRGB(0,255,0)
	tick.Font = Enum.Font.GothamBold
	tick.Parent = keepBtn

	local keepOn = false
	local tickTweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local function updateTick()
		tween(tick, tickTweenInfo, {TextTransparency = keepOn and 0 or 1}):Play()
	end
	updateTick()

	keepBtn.MouseButton1Click:Connect(function()
		keepOn = not keepOn
		updateTick()
	end)

	-- Minimize logic
	local minimized = false
	local function setContentVisible(v)
		for _, child in ipairs(bg:GetChildren()) do
			if child ~= bgCorner and child ~= title and child ~= titleCorner then
				if child:IsA("GuiObject") then child.Visible = v end
			end
		end
		title.Visible = v
	end

	miniBtn.MouseButton1Click:Connect(function()
		minimized = not minimized
		if minimized then
			setContentVisible(false)
			tween(frame, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
				Size = UDim2.fromOffset(120,30),
				BackgroundColor3 = Color3.fromRGB(0,0,0)
			}):Play()
			bg.Visible = false
		else
			tween(frame, TweenInfo.new(0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {
				Size = UDim2.fromOffset(316,128),
				BackgroundColor3 = Color3.fromRGB(0,0,0)
			}):Play()
			task.delay(0.26, function()
				bg.Visible = true
				setContentVisible(true)
			end)
		end
	end)

	-- Sending logic (supported APIs only)
	local function sendToChat(msg)
		-- Prefer new chat system
		local success = false
		local config = TextChatService:FindFirstChild("ChatInputBarConfiguration")
		if config and config:IsA("ChatInputBarConfiguration") then
			local channel = config.TargetTextChannel
			if channel then
				channel:SendAsync(msg)
				success = true
			end
		end

		-- Fallback to legacy if available
		if not success then
			local eventsFolder = ReplicatedStorage:FindFirstChild("DefaultChatSystemChatEvents")
			if eventsFolder and eventsFolder:FindFirstChild("SayMessageRequest") then
				eventsFolder.SayMessageRequest:FireServer(msg, "All")
				success = true
			end
		end

		return success
	end

	local function onSend()
		local raw = input.Text or ""
		if raw == "" then return end
		local converted = stylize(raw)
		local ok = sendToChat(converted)

		-- Only clear if Keep Text is OFF
		if ok and not keepOn then
			input.Text = ""
		end
	end

	sendBtn.MouseButton1Click:Connect(onSend)
	input.FocusLost:Connect(function(enter)
		if enter then onSend() end
	end)

	-- Animate frame/children in
	frame.Size = UDim2.fromOffset(0,0)
	frame.BackgroundTransparency = 1
	local frameGoal = {Size = UDim2.fromOffset(316,128), BackgroundTransparency = 0}
	tween(frame, TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out), frameGoal):Play()
end

-- Theme button hooks
button1.MouseButton1Click:Connect(function()
	popEffect(button1)
	fadeOutChooser()
	buildPanel(THEME_IMAGE_1)
end)
button2.MouseButton1Click:Connect(function()
	popEffect(button2)
	fadeOutChooser()
	buildPanel(THEME_IMAGE_2)
end)
